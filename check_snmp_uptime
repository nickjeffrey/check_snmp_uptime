#!/usr/bin/perl -w

#
#  Nagios plugin for determining uptime via SNMP
#


# OUTSTANDING ISSUES
# ------------------



# CHANGE LOG
# ----------
#   2020-10-18  njeffrey	Script created
#   2020-10-30  njeffrey	Bug fix detect if $uptime is undefined due to SNMP timeout



# NOTES
# -----
#  This script should return one (and only one) line of ouput.  Multiple
#  lines of output are silently ignored by nagios.
#
#  The line of output will become the body of the alert message sent by nagios
#
#
#
#  This script is executed on the nagios server, and makes SNMP queries to a remote Windows host.
#
#  You will need to add a section similar to the following to the commands.cfg file on the nagios server.  
#      # 'check_snmp_uptime' command definition
#      define command{
#             command_name    check_snmp_uptime
#             command_line    $USER1$/check_snmp_uptime -H $HOSTADDRESS$ -C $ARG1$ -w $ARG2$
#             }
#
#
#  You will need to add a section similar to the following to the services.cfg file on the nagios server.  
#      # Check uptime via SNMP
#      # syntax is check_snmp_uptime!optional_snmp_community!optional_minutes_uptime_warn_threshold
#      define service {
#              use                             generic-24x7-service
#              hostgroup_name                  all_windows,all_linux,all_cisco
#              service_description             uptime
#              check_command                   check_snmp_uptime!optional_snmp_community!optional_minutes_uptime_warn_threshold
#              }


# TROUBLESHOOTING
# ---------------


# SNMP OID VALUES
# ---------------
#   This script queries the following SNMP OID values
#      1.3.6.1.2.1.1.3.0     sysUptime      (used by Windows 
#      1.3.6.1.2.1.25.1.1.0  hostUptime     (used by unix-like systems)
#      1.3.6.1.6.3.10.2.1.3  snmpEngineTime (used by Cisco switches)
#   Don't worry, you don't need to choose an OID, as the script will try all 3 of the above.


# 
use diagnostics;                                #tell the perl interpreter to give us verbose messages while debugging
use strict;                                     #enforce good coding practices
use Getopt::Long;				# require perl module.  Should be in base  perl install.  Or install with:  perl -MCPAN -e 'install Getopt::Long'




# define variables
my ($snmpwalk,$snmpget,$community,$host,$output,$uptime,$warn);
my ($oid,$oid_value,$oid_sysUptime,$oid_hostUptime,$oid_snmpEngineTime);
my ($opt_h,$opt_H,$opt_C,$opt_v,$opt_w);
my ($cmd,$verbose);
my ($OK,$WARN,$CRITICAL,$UNKNOWN,$CHECK_NAME);				#define variables
$verbose             = "no";						#yes/no flag for verbose output for debugging
$snmpget             = "/usr/bin/snmpget";				#location of binary
$community           = "public";					#SNMP community string 
$oid_sysUptime       = "1.3.6.1.2.1.1.3.0";
$oid_hostUptime      = "1.3.6.1.2.1.25.1.1.0";
$oid_snmpEngineTime  = "1.3.6.1.6.3.10.2.1.3";
$warn                = 30;						#default warning threshold is <30 minutes uptime
$CHECK_NAME          = "uptime";					#define name of nagios check
#
# Nagios return codes
#
$OK=            0;                              			#this script returns a value to nagios for processing
$WARN=          1;                              			#this script returns a value to nagios for processing
$CRITICAL=      2;                              			#this script returns a value to nagios for processing
$UNKNOWN=       3;                              			#this script returns a value to nagios for processing




sub get_options {
   #
   # this gets the command line parameters provided by the users
   #
   Getopt::Long::Configure('bundling');
   GetOptions(
      "h"   => \$opt_h, "help"        => \$opt_h,
      "C=s" => \$opt_C, "community=s" => \$opt_C, 
      "H=s" => \$opt_H, "host=s"      => \$opt_H, 
      "v"   => \$opt_v, "verbose"     => \$opt_v,
      "w=i" => \$opt_w, "warn=i"      => \$opt_w,
   );
   #
   # If the user provided -h or --help value, print the help.
   #
   if( defined( $opt_h ) ) {
      print "Use this syntax: $0 -H hostname -C snmp_community_name --verbose \n";
      exit $UNKNOWN;				#exit script
   }
   #
   # If the user provided -v or --verbose parameter, increase verbosity for debuggingg
   #
   if( defined( $opt_v ) ) {
      $verbose = "yes";
   }
   #
   # If the user provided -w or --warn parameter, use that value as the number of minutes uptime to warn on
   #
   if( defined( $opt_w ) ) {
      $warn = $opt_w;
      print "   setting warning threshold to $warn minutes uptime \n" if ($verbose eq "yes");
   }
   #
   # If the user did not supply a -C or --community= value, use the default.
   #
   if( defined( $opt_C ) ) {
      $community = $opt_C;
   } else {
      $community = "public";
   }
   #
   # If the user did not supply a -H or --host== value, generate a warning.
   #
   if( defined( $opt_H ) ) {
      $host = $opt_H;
   } else {
      print "$CHECK_NAME Unknown - cannot determine remote host \n";
      exit $UNKNOWN;				#exit script
   }						#end of if/else block
}  			                     	#end of subroutine






sub sanity_checks {
   #
   print "running sanity_checks subroutine \n" if ($verbose eq "yes");
   #
   # figure out where the snmpget command is on this system (varies across UNIX flavors)
   $snmpget = "/usr/bin/snmpget"        if ( -e "/usr/bin/snmpget" );
   $snmpget = "/usr/local/bin/snmpget"  if ( -e "/usr/local/bin/snmpget" );
   if( ! defined( $snmpget) ) {
      print "$CHECK_NAME Unknown - cannot locate snmpget binary\n";
      exit $UNKNOWN;				#exit script
   }						#end of if block
   if( ! -x  $snmpget ) {
      print "$CHECK_NAME Unknown - $snmpget is not executable\n";
      exit $UNKNOWN;				#exit script
   }						#end of if block
}		 						#end of subroutine




sub get_uptime {
   #
   print "running get_uptime subroutine \n" if ($verbose eq "yes");
   #
   #
   #Windows/Linux/Cisco use different OID for uptime, so check each until an uptime is found.
   foreach $oid ($oid_sysUptime,$oid_hostUptime,$oid_snmpEngineTime) {
      $cmd = "$snmpget -Ont -v 1 -c $community $host $oid";  #use -Ont to output numeric OID and timeticks
      print "   running command: $cmd \n" if ($verbose eq "yes");
      open (IN,"$cmd 2>&1|");	#open filehandle
      while (<IN>) {						#read a line from the filehandle
         $oid_value = 0;					#initialize variable
         s/\"//g;						#get rid of any quotation marks in the output
         if ( /$oid = ([0-9]+)/) {				#parse out the line of output into OID and value
            $oid_value = $1;					#assign more meaningful variable name
            print "   found OID $oid timeticks $oid_value  \n" if ($verbose eq "yes");
            if ($oid_value > 0 ) {				#convert timeticks from hundredths of seconds to dd:hh:mm uptime
               $uptime = $oid_value / 100 / 60; 
               $uptime = sprintf("%.0f",$uptime);               #truncate to 0 decimal places
            }							#end of if block
         }							#end of if block
      }								#end of while loop
      close IN;							#close filehandle
   }								#end of foreach loop
}		 						#end of subroutine





sub print_output {
   #
   print "running print_output subroutine \n" if ($verbose eq "yes");
   #
   unless ($uptime) {						#catch undefined variable if there was no SNMP response
      print "$CHECK_NAME UNKNOWN - could not determine uptime via SNMP query.  Please check SNMP configuration. \n";	
      exit $UNKNOWN;
   }
   print "   uptime=$uptime warn=$warn \n" if ($verbose eq "yes");
   if ($uptime <= $warn ) {
      print "$CHECK_NAME WARN - recent reboot detected - uptime is $uptime minutes \n";	
      exit $WARN;
   }
   if ($uptime > $warn ) {
      #
      # display output in days if uptime is more than 60 minutes * 24 hours
      if ($uptime > 1440 ) {
         $uptime = $uptime / 1440; 
         $uptime = sprintf("%.1f",$uptime);	               #truncate to 1 decimal places
         print "$CHECK_NAME OK - uptime is $uptime days \n";	#describe uptime in days
         exit $OK;
      } else {
         print "$CHECK_NAME OK - uptime is $uptime minutes \n";	#describe uptime in minutes
         exit $OK;
      }								#end of if/else block
   }								#end of if block
}                                            			#end of subroutine








# --------------- main body of program ------------------------------------
get_options;
sanity_checks;
get_uptime;
print_output;

